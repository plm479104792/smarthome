package com.homecoo.smarthome.trigger;


import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.springframework.scheduling.quartz.QuartzJobBean;

import com.homecoo.smarthome.domain.Schedule;
import com.homecoo.smarthome.domain.WorkContext;
import com.homecoo.smarthome.schedule.work.LoadWorkStrategy;
import com.homecoo.smarthome.schedule.work.impl.OnetimeLoadStategy;
import com.homecoo.smarthome.service.ISchedule;
import com.homecoo.smarthome.service.TimeManagerService;
import com.homecoo.smarthome.util.DateUtil;
import com.homecoo.smarthome.util.ScheduleToWorkContext;
import com.homecoo.smarthome.util.SpringUtil;


public class LoadTodaySchedule extends QuartzJobBean{
	
	/*Quartz中,直接使用 spring的注解 是没有用的，spring 和 quartz 是两个不同的容器。没法
		Spring注入的mapper接口类在Quartz中不能通过@Autowired或者@Resource获取到的
		@Autowired
		private ISchedule scheduleService;
*/		
		/**
		 * 
		 * */
		@Override
		protected void executeInternal(JobExecutionContext context)
				throws JobExecutionException {
			Date date=new Date();
			String riqi=DateUtil.ToYMD(date);
			System.out.println(riqi);
			ISchedule scheduleService=SpringUtil.getObject(ISchedule.class);
			TimeManagerService timeManagerService=SpringUtil.getObject(TimeManagerService.class);
			List<Schedule> list= scheduleService.getTodayAllSchedule(riqi);
//			OnetimeLoadStategy onetimeLoadStategy= SpringUtil.getObject(OnetimeLoadStategy.class);
			System.out.println(list.size());
			Iterator<Schedule> iterator=list.iterator();
			while (iterator.hasNext()) {
				WorkContext workContext=new WorkContext();
				workContext=ScheduleToWorkContext.ToWorkContext(iterator.next());
				timeManagerService.putSendRequest(workContext);
				
			}
			
			
//			for (int i = 0; i < list.size(); i++) {
//				System.out.println(list.get(i).getPacketData());
////				WorkContext workContext=ScheduleToWorkContext.ToWorkContext(list.get(i));
//				timeManagerService.putSendRequest(workContext);
//				onetimeLoadStategy.loadWork(workContext.getExecuteTime(),1);
//			}
//			timeManagerService.start();
		}
		
}
