package com.homecoo.smarthome.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.homecoo.smarthome.domain.Schedule;
import com.homecoo.smarthome.persistence.ScheduleMapper;
import com.homecoo.smarthome.service.ISchedule;

@Service
public class ScheduleServiceImpl implements ISchedule{

	@Autowired
	private ScheduleMapper scheduleMapper;
	
	@Override
	public List<Schedule> getScheduleByGatewayNo(String gatewayNo) {
		List<Schedule> list=scheduleMapper.selectScheduleBygatewayNo(gatewayNo);
		return list;
	}

	@Override
	public List<Schedule> getScheduleByPhoneNum(String phoneNum) {
		List<Schedule> list=scheduleMapper.selectScheduleByphoneNum(phoneNum);
		return list;
	}

	@Override
	public int deleteScheduleByPhoneNum(String phoneNum) {
		int row=scheduleMapper.deleteScheduleByPhoneNum(phoneNum);
		return row;
	}

	@Override
	public int deleteScheduleByGatewayNo(String gatewayNo) {
		int row=scheduleMapper.deleteScheduleByGatewayNo(gatewayNo);
		return row;
	}


	@Override
	public List<Schedule> getTodayAllSchedule(String date) {
		List<Schedule> list=scheduleMapper.selectTodayAllSchedule(date);
		return list;
	}

	@Override
	public int getSchedule(Schedule schedule) {
		int row=0;
		try {
			if (schedule.getStrategy().equals("1")) {
				
				if (schedule.getDeviceNo()==null) {
					List<Schedule> list=scheduleMapper.selectScheduleByRiQiShiJDeviceNo(schedule);
					
					row=list.size();
				}else{
					List<Schedule> list=scheduleMapper.selectScheduleByRiQiShiJThemeNo(schedule);
					row=list.size();
				}
			}else if (schedule.getStrategy().equals("2")) {
				System.out.println("  星期    "+schedule.getXingqi());
				if (schedule.getDeviceNo()==null) {
					List<Schedule> list=scheduleMapper.selectScheduleByXingQiShiJDeviceNo(schedule);
					row=list.size();
				}else{
					List<Schedule> list=scheduleMapper.selectScheduleByXingQiShiJThemeNo(schedule);
					row=list.size();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return row;
	}

	@Override
	public int addShedlue(Schedule schedule) {
		int row= scheduleMapper.insertSchedule(schedule);
		return row;
	}

	@Override
	public List<Schedule> getScheduleByDeviceNoAndPhoneNum(String deviceNo,
			String phoneNum) {
		Schedule schedule=new Schedule();
		schedule.setDeviceNo(deviceNo);
		schedule.setPhoneNum(phoneNum);
		List<Schedule> list=scheduleMapper.getScheduleByDeviceNoAndPhoenNum(schedule);
		return list;
	}

	@Override
	public List<Schedule> getScheduleByThemeNoAndPhoneNum(String themeNo,
			String phoneNum) {
		Schedule schedule=new Schedule();
		schedule.setThemeNo(themeNo);
		schedule.setPhoneNum(phoneNum);
		List<Schedule> list=scheduleMapper.getScheduleByDeviceNoAndPhoenNum(schedule);
		return list;
	}

	/**
	 * type  1:设备   2:情景
	 * */
	@Override
	public int updateSchedule(Schedule schedule, Integer type) {
		int row=0;
		if (type==1) {
			row= scheduleMapper.updateScheduleByDeviceNo(schedule);
			return row;
		}else if(type==2){
			row= scheduleMapper.updateScheduleByThemeNo(schedule);
		}
		return row;
	}

	@Override
	public int deleteScheduleByScheduleId(Integer scheduleId) {
		int row=scheduleMapper.deleteScheduleByScheduleId(scheduleId);
		return row;
	}

}
